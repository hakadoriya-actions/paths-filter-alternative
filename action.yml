name: github-actions-paths-ignore-alternative
description: 'TODO'
author: 'ginokent'

branding:
  icon: search
  color: gray-dark

inputs:
  #
  # Common
  #
  paths-ignore:
    description: 'Substring of paths to ignore (like on.push.paths-ignore) but with regex'
    required: false
    default: ''  # empty string
  skip-checkout:
    description: 'If true, skip the checkout step'
    required: false
    default: 'false'
  debug:
    description: 'Debug mode'
    required: false
    default: 'false'
  #
  # Push event
  # ref. # https://docs.github.com/ja/webhooks/webhook-events-and-payloads#push
  #
  before:
    description: 'The commit SHA before the push (push trigger only)'
    required: false
    default: ${{ github.event.before }}
  after:
    description: 'The commit SHA after the push (push trigger only)'
    required: false
    default: ${{ github.event.after }}
  #
  # Pull request event
  #
  base-ref:
    description: 'The base branch of the repository (pull_request trigger only)'
    required: false
    default: ${{ github.base_ref }}
  head-ref:
    description: 'The head branch of the pull request (pull_request trigger only)'
    required: false
    default: ${{ github.head_ref }}

outputs:
  skip:
    value: ${{ steps.paths-ignore.outputs.skip }}
    description: 'Skip the following steps'

runs:
  using: composite
  steps:
    - if: ${{ inputs.skip-checkout != 'true' }}
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: github-actions-paths-ignore-alternative
      id: paths-ignore
      shell: 'bash'
      run: |
        # LICENSE: https://github.com/kunitsucom/log.sh/blob/HEAD/LICENSE
        # Common
        if [ "${LOGSH_COLOR:-}" ] || [ -t 2 ] ; then LOGSH_COLOR=true; else LOGSH_COLOR=''; fi
        _logshRFC3339() { date "+%Y-%m-%dT%H:%M:%S%z" | sed "s/\(..\)$/:\1/"; }
        _logshCmd() { for a in "$@"; do if echo "${a:-}" | grep -Eq "[[:blank:]]"; then printf "'%s' " "${a:-}"; else printf "%s " "${a:-}"; fi; done | sed "s/ $//"; }
        # Color
        LogshDefault() { test "  ${LOGSH_LEVEL:-0}" -gt 000 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;35m}  DEFAULT${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshDebug() { test "    ${LOGSH_LEVEL:-0}" -gt 100 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;34m}    DEBUG${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshInfo() { test "     ${LOGSH_LEVEL:-0}" -gt 200 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;32m}     INFO${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshNotice() { test "   ${LOGSH_LEVEL:-0}" -gt 300 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;36m}   NOTICE${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshWarn() { test "     ${LOGSH_LEVEL:-0}" -gt 400 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;33m}     WARN${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshWarning() { test "  ${LOGSH_LEVEL:-0}" -gt 400 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;33m}  WARNING${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshError() { test "    ${LOGSH_LEVEL:-0}" -gt 500 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;31m}    ERROR${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshCritical() { test " ${LOGSH_LEVEL:-0}" -gt 600 || echo "$*" | awk "{print \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;1;31m} CRITICAL${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshAlert() { test "    ${LOGSH_LEVEL:-0}" -gt 700 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;41m}    ALERT${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshEmergency() { test "${LOGSH_LEVEL:-0}" -gt 800 || echo "$*" | awk "{print \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;1;41m}EMERGENCY${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshExec() { LogshInfo "$ $(_logshCmd "$@")" && "$@"; }
        LogshRun() { _dlm="####R#E#C#D#E#L#I#M#I#T#E#R####" && _all=$({ _out=$("$@") && _rtn=$? || _rtn=$? && printf "\n%s" "${_dlm:?}${_out:-}" && return "${_rtn:-0}"; } 2>&1) && _rtn=$? || _rtn=$? && _dlmno=$(echo "${_all:-}" | sed -n "/${_dlm:?}/=") && _cmd=$(_logshCmd "$@") && _stdout=$(echo "${_all:-}" | tail -n +"${_dlmno:-1}" | sed "s/^${_dlm:?}//") && _stderr=$(echo "${_all:-}" | head -n "${_dlmno:-1}" | grep -v "^${_dlm:?}") && LogshInfo "$ ${_cmd:-}" && LogshInfo "${_stdout:-}" && { [ -z "${_stderr:-}" ] || LogshWarning "${_stderr:?}"; } && return "${_rtn:-0}"; }
        # export functions for bash
        # shellcheck disable=SC3045
        echo "${SHELL-}" | grep -q "/?bash" && export -f _logshRFC3339 _logshCmd LogshDefault LogshDebug LogshInfo LogshWarning LogshError LogshCritical LogshAlert LogshEmergency LogshExec LogshRun || true

        #
        # inputs
        #
        LogshInfo " github.event_name: ${{ github.event_name }}"
        LogshInfo "     inputs.before: ${{ inputs.before }}"
        LogshInfo "      inputs.after: ${{ inputs.after }}"
        LogshInfo "   inputs.base-ref: ${{ inputs.base-ref }}"
        LogshInfo "   inputs.head-ref: ${{ inputs.head-ref }}"

        #
        # main
        #
        LogshInfo "Create paths-ignore.txt (without comments and empty lines)"
        grep -v -e "^[[:space:]]*#" -e "^[[:space:]]*$" <<EOF | tee paths-ignore.txt
        ${{ inputs.paths-ignore }}
        EOF

        if [[ "${{ github.event_name }}" == 'push' ]]; then
          LogshInfo "${{ github.event_name }} event"
          before="${{ inputs.before }}"
          after="${{ inputs.after }}"
        elif [[ "${{ github.event_name }}" == 'pull_request' ]]; then
          LogshInfo "${{ github.event_name }} event"
          before="${{ inputs.base-ref }}"
          after="${{ inputs.head-ref }}"
        else
          LogshInfo "${{ github.event_name }} event. NOT SKIP."
          exit 0
        fi

        if [[ -n "${{ inputs.paths-ignore }}" ]]; then
          if ! diff_files=$(git diff --name-only "${before:?}" "${after:?}"); then
            LogshWarn "Failed to get diff files. NOT SKIP."
            exit 0
          fi
          files_without_paths_ignore=$(echo "${diff_files:?}" | grep -Ev -f paths-ignore.txt)
          LogshDebug "files_without_paths_ignore:"
          LogshDebug "${files_without_paths_ignore}"
          if [[ -z "${files_without_paths_ignore:-}" ]]; then
            LogshInfo "Skip the following steps"
            LogshExec echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
        else
          LogshInfo "paths-ignore is empty"
          if ! diff_files=$(git diff --name-only "${before:?}" "${after:?}"); then
            LogshWarn "Failed to get diff files. NOT SKIP."
            exit 0
          fi
          if [[ -z "$(echo "${diff_files:?}")" ]]; then
            LogshInfo "Skip the following steps"
            LogshExec echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi
    - name: DEBUG
      if: always() && ${{ inputs.debug == 'true' }}
      shell: bash
      run: |
        cat <<'DEBUG_DOC'
        == DEBUG =======================================================
        -- inputs -----------------------------------------------------
        before: ${{ inputs.before }}
        after: ${{ inputs.after }}
        base-ref: ${{ inputs.base-ref }}
        head-ref: ${{ inputs.head-ref }}
        paths-ignore: ${{ inputs.paths-ignore }}
        -- github -----------------------------------------------------
        github.event_name: ${{ github.event_name }}
        github.ref: ${{ github.ref }}
        -- toJSON(github) ----------------------------------------------
        ${{ toJSON(github) }}
        ================================================================
        DEBUG_DOC
